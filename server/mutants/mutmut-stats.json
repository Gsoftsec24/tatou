{
    "tests_by_mangled_function_name": {
        "server.x_create_app": [
            "test/test_server_fuzz.py::test_fuzz_all_http_methods[GET-/api/create-user]",
            "test/test_api.py::test_create_app_defaults_when_env_missing",
            "test/test_api.py::test_create_app_handles_db_exception",
            "test/test_server_fuzz.py::test_create_app_fuzz",
            "test/test_api.py::test_create_app_invalid_config",
            "test/test_api.py::test_create_app_registers_routes_all_methods",
            "test/test_api.py::test_create_user_missing_fields",
            "test/test_api.py::test_create_app_registers_routes",
            "test/test_api.py::test_create_app_is_idempotent",
            "test/test_api.py::test_create_app_logs_output",
            "test/test_api.py::test_create_app_logs_warning_on_invalid_env",
            "test/test_api.py::test_create_app_multiple_calls",
            "test/test_api.py::test_create_app_with_missing_storage_dir",
            "test/test_api.py::test_healthz_returns_ok",
            "test/test_api.py::test_create_app_engine_failure",
            "test/test_api.py::test_create_user_conflict",
            "test/test_api.py::test_create_app_minimal_config"
        ],
        "watermarking_method.x_load_pdf_bytes": [
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_integrity",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_secret_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_key",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_invalid_pdfs",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_methods.py::test_hash_after_eof_no_marker_found_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_add_after_eof_empty_key_raises",
            "test/test_watermarking_methods.py::test_load_pdf_bytes_reads_from_file",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_pdf_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_domain_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_validates_email",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_add_after_eof_mac_integrity_differs_on_key_change",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_email_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_methods.py::test_load_pdf_bytes_invalid_path_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_empty_secret_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload",
            "test/test_watermarking_fuzz.py::test_fuzz_load_pdf_bytes_robustness",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_empty_secret_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises",
            "test/test_watermarking_methods.py::test_load_pdf_bytes_accepts_bytes",
            "test/test_watermarking_methods.py::test_add_after_eof_different_secret_results_in_different_output",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker",
            "test/test_watermarking_methods.py::test_add_after_eof_output_still_pdf",
            "test/test_watermarking_methods.py::test_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_repeated_watermark_changes_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_no_marker_raises"
        ],
        "add_after_eof.x\u01c1AddAfterEOF\u01c1read_secret": [
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_key",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload",
            "test/test_watermarking_methods.py::test_add_after_eof_add_and_read",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_add_after_eof_no_marker_raises"
        ],
        "add_after_eof.x\u01c1AddAfterEOF\u01c1_build_payload": [
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_empty_secret_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_output_still_pdf",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_key",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_contains_encoded_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_key",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_format",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_different_secret_results_in_different_output",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_empty_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_mac_integrity_differs_on_key_change",
            "test/test_watermarking_methods.py::test_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_repeated_watermark_changes_output"
        ],
        "add_after_eof.x\u01c1AddAfterEOF\u01c1_mac_hex": [
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_key",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_contains_encoded_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_different_secret_results_in_different_output",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_mac_integrity_differs_on_key_change",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker",
            "test/test_watermarking_methods.py::test_add_after_eof_build_payload_format",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_key",
            "test/test_watermarking_methods.py::test_add_after_eof_output_still_pdf",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload",
            "test/test_watermarking_methods.py::test_add_after_eof_add_and_read",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_add_after_eof_repeated_watermark_changes_output"
        ],
        "add_after_eof.x\u01c1AddAfterEOF\u01c1add_watermark": [
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_empty_secret_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_empty_key_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_different_secret_results_in_different_output",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise",
            "test/test_watermarking_methods.py::test_add_after_eof_output_still_pdf",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_pdf_raises",
            "test/test_watermarking_methods.py::test_add_after_eof_invalid_key",
            "test/test_watermarking_methods.py::test_add_after_eof_mac_integrity_differs_on_key_change",
            "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload",
            "test/test_watermarking_methods.py::test_add_after_eof_add_and_read",
            "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_invalid_pdfs",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_add_after_eof_repeated_watermark_changes_output"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1extract_email_parts": [
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_structure",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_secret",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_key",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_valid_base64",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_deterministic",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_includes_email_parts"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1_build_payload": [
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_structure",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_secret",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_key",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_valid_base64",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_deterministic",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_includes_email_parts"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1is_email": [
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_email_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_domain_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_validates_email"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1_mac_hex": [
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_structure",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_secret",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_key",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_valid_base64",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_deterministic",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_build_payload_includes_email_parts"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1add_watermark": [
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_email_after_eof_empty_secret_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid",
            "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_email_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email",
            "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof",
            "test/test_watermarking_methods.py::test_email_after_eof_invalid_domain_raises",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_validates_email"
        ],
        "email_after_eof.x\u01c1EmailAfterEOF\u01c1read_secret": [
            "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_valid_email",
            "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid"
        ],
        "hash_after_eof.x\u01c1HashAfterEOF\u01c1_mac_hex": [
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_empty_inputs_raise",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_key",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_structure",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_encoding_is_valid",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_handles_unicode",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret"
        ],
        "hash_after_eof.x\u01c1HashAfterEOF\u01c1_build_payload": [
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_empty_inputs_raise",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_key",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_structure",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_encoding_is_valid",
            "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_handles_unicode",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret"
        ],
        "hash_after_eof.x\u01c1HashAfterEOF\u01c1is_email": [
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_integrity",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret"
        ],
        "hash_after_eof.x\u01c1HashAfterEOF\u01c1read_secret": [
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_no_marker_found_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret"
        ],
        "hash_after_eof.x\u01c1HashAfterEOF\u01c1add_watermark": [
            "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret",
            "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_integrity",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_secret_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker",
            "test/test_watermarking_methods.py::test_hash_after_eof_empty_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read",
            "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash",
            "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof",
            "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run",
            "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output",
            "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac",
            "test/test_watermarking_fuzz.py::test_stress_randomized_sequences",
            "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret"
        ],
        "watermarking_method.x_is_pdf_bytes": [
            "test/test_watermarking_methods.py::test_is_pdf_bytes_false_for_invalid",
            "test/test_watermarking_fuzz.py::test_fuzz_is_pdf_bytes",
            "test/test_watermarking_methods.py::test_is_pdf_bytes_true_for_valid"
        ]
    },
    "duration_by_test": {
        "test/test_api.py::test_healthz_returns_ok": 0.0003681499511003494,
        "test/test_api.py::test_create_user_missing_fields": 0.0003704829141497612,
        "test/test_api.py::test_create_user_conflict": 0.0002702539786696434,
        "test/test_api.py::test_create_app_minimal_config": 0.0002719620242714882,
        "test/test_api.py::test_create_app_with_missing_storage_dir": 0.0002448700834065676,
        "test/test_api.py::test_create_app_handles_db_exception": 0.00023404299281537533,
        "test/test_api.py::test_create_app_registers_routes": 0.00023912498727440834,
        "test/test_api.py::test_create_app_invalid_config": 0.0002371370792388916,
        "test/test_api.py::test_create_app_logs_warning_on_invalid_env": 0.0002878350205719471,
        "test/test_api.py::test_create_app_multiple_calls": 0.00022784899920225143,
        "test/test_api.py::test_create_app_engine_failure": 0.00023512309417128563,
        "test/test_api.py::test_create_app_defaults_when_env_missing": 0.00023092003539204597,
        "test/test_api.py::test_create_app_registers_routes_all_methods": 0.00021092710085213184,
        "test/test_api.py::test_create_app_logs_output": 0.00023099593818187714,
        "test/test_api.py::test_create_app_is_idempotent": 0.00022797705605626106,
        "test/test_watermarking_methods.py::test_add_after_eof_add_and_read": 0.00018540909513831139,
        "test/test_watermarking_methods.py::test_add_after_eof_invalid_key": 0.00015761889517307281,
        "test/test_watermarking_methods.py::test_add_after_eof_no_marker_raises": 0.0001410499680787325,
        "test/test_watermarking_methods.py::test_email_after_eof_valid_email": 0.0001658550463616848,
        "test/test_watermarking_methods.py::test_email_after_eof_invalid_email_raises": 0.00014442112296819687,
        "test/test_watermarking_methods.py::test_hash_after_eof_add_and_read": 0.0001601849216967821,
        "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_raises": 0.00016268901526927948,
        "test/test_watermarking_methods.py::test_add_after_eof_empty_secret_raises": 0.0001435689628124237,
        "test/test_watermarking_methods.py::test_add_after_eof_empty_key_raises": 0.00013595097698271275,
        "test/test_watermarking_methods.py::test_add_after_eof_invalid_pdf_raises": 0.00014054309576749802,
        "test/test_watermarking_methods.py::test_add_after_eof_different_secret_results_in_different_output": 0.00014619412831962109,
        "test/test_watermarking_methods.py::test_add_after_eof_repeated_watermark_changes_output": 0.00015115411952137947,
        "test/test_watermarking_methods.py::test_add_after_eof_output_still_pdf": 0.00014875712804496288,
        "test/test_watermarking_methods.py::test_add_after_eof_mac_integrity_differs_on_key_change": 0.00015374808572232723,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_corrupted_marker": 0.0001562552060931921,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_truncated_payload": 0.0001532400492578745,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_wrong_key_raises": 0.00015622912906110287,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_with_extra_noise": 0.00015396089293062687,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_returns_exact_secret": 0.00015497696585953236,
        "test/test_watermarking_methods.py::test_add_after_eof_read_secret_case_sensitivity": 0.00014580297283828259,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_format": 0.00014788517728447914,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_secret": 0.00013511814177036285,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_changes_with_key": 0.00017186696641147137,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_empty_secret_raises": 0.00013280496932566166,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_empty_key_raises": 0.00014920905232429504,
        "test/test_watermarking_methods.py::test_add_after_eof_build_payload_contains_encoded_secret": 0.000134727219119668,
        "test/test_watermarking_methods.py::test_load_pdf_bytes_accepts_bytes": 0.00011980999261140823,
        "test/test_watermarking_methods.py::test_load_pdf_bytes_reads_from_file": 0.00014770007692277431,
        "test/test_watermarking_methods.py::test_load_pdf_bytes_invalid_path_raises": 0.00011330191045999527,
        "test/test_watermarking_methods.py::test_is_pdf_bytes_true_for_valid": 0.00013385294005274773,
        "test/test_watermarking_methods.py::test_is_pdf_bytes_false_for_invalid": 0.00011065113358199596,
        "test/test_watermarking_methods.py::test_hash_after_eof_empty_secret_raises": 0.00013266783207654953,
        "test/test_watermarking_methods.py::test_hash_after_eof_empty_key_raises": 0.00013448181562125683,
        "test/test_watermarking_methods.py::test_hash_after_eof_no_marker_found_raises": 0.00013307714834809303,
        "test/test_watermarking_methods.py::test_hash_after_eof_tampered_marker_raises": 0.0001496609766036272,
        "test/test_watermarking_methods.py::test_hash_after_eof_partial_payload_raises": 0.00015176297165453434,
        "test/test_watermarking_methods.py::test_hash_after_eof_empty_payload_raises": 0.0001290889922529459,
        "test/test_watermarking_methods.py::test_hash_after_eof_wrong_encoding_does_not_crash": 0.00015161605551838875,
        "test/test_watermarking_methods.py::test_hash_after_eof_reads_correct_secret": 0.0001485410612076521,
        "test/test_watermarking_methods.py::test_hash_after_eof_wrong_key_invalidates_mac": 0.00014917878434062004,
        "test/test_watermarking_methods.py::test_hash_after_eof_non_ascii_secret_recoverable": 0.00013581081293523312,
        "test/test_watermarking_methods.py::test_hash_after_eof_different_keys_produce_different_output": 0.0001434518489986658,
        "test/test_watermarking_methods.py::test_hash_after_eof_different_secrets_produce_different_output": 0.00015352503396570683,
        "test/test_watermarking_methods.py::test_hash_after_eof_watermark_appears_after_eof": 0.00015730597078800201,
        "test/test_watermarking_methods.py::test_hash_after_eof_watermark_is_unique_per_run": 0.00015869783237576485,
        "test/test_watermarking_methods.py::test_hash_after_eof_payload_includes_hash_marker": 0.00015713204629719257,
        "test/test_watermarking_methods.py::test_hash_after_eof_handles_non_ascii_secret": 0.00015593692660331726,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_structure": 0.00015491596423089504,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_secret": 0.00014237104915082455,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_differs_for_different_key": 0.0001436038874089718,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_encoding_is_valid": 0.00014846399426460266,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_handles_unicode": 0.000142933102324605,
        "test/test_watermarking_methods.py::test_hash_after_eof_build_payload_empty_inputs_raise": 0.0001285721082240343,
        "test/test_watermarking_methods.py::test_email_after_eof_empty_secret_raises": 0.0001418781466782093,
        "test/test_watermarking_methods.py::test_email_after_eof_uppercase_email_valid": 0.00015918118879199028,
        "test/test_watermarking_methods.py::test_email_after_eof_invalid_domain_raises": 0.00013590487651526928,
        "test/test_watermarking_methods.py::test_email_after_eof_watermark_added_after_eof": 0.00019399006851017475,
        "test/test_watermarking_methods.py::test_email_after_eof_different_emails_produce_different_outputs": 0.0006619109772145748,
        "test/test_watermarking_methods.py::test_email_after_eof_different_keys_produce_different_outputs": 0.00014076405204832554,
        "test/test_watermarking_methods.py::test_email_after_eof_handles_unicode_email": 0.0001468658447265625,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_structure": 0.00014080293476581573,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_deterministic": 0.00014109397307038307,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_secret": 0.00013838312588632107,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_diff_key": 0.00013459310866892338,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_includes_email_parts": 0.0001474618911743164,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_valid_base64": 0.0001516880001872778,
        "test/test_watermarking_methods.py::test_email_after_eof_build_payload_unicode_email": 0.00023994105868041515,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[GET-/api/create-user]": 0.00020705186761915684,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PUT-/healthz]": 0.00019293581135571003,
        "test/test_server_fuzz.py::test_sql_injection_attempts['; EXEC xp_cmdshell('whoami') --]": 0.00016935286112129688,
        "test/test_watermarking_fuzz.py::test_fuzz_is_pdf_bytes": 0.00019316701218485832,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[DELETE-/api/watermark]": 0.00019677798263728619,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PATCH-/api/create-user]": 0.00018843798898160458,
        "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_integrity": 0.0002269688993692398,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PUT-/api/create-user]": 0.00019845692440867424,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[DELETE-/api/create-user]": 0.00020793289877474308,
        "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_add_and_read": 0.00024838303215801716,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<img src=x onerror=alert(1)>]": 0.00017736502923071384,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<script>alert(1)</script>]": 0.00016608205623924732,
        "test/test_server_fuzz.py::test_sql_injection_attempts[' OR sleep(5) --]": 0.00016604014672338963,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<body onload=alert(1)>]": 0.00017320900224149227,
        "test/test_watermarking_fuzz.py::test_fuzz_add_after_eof_invalid_pdfs": 0.00021679000928997993,
        "test/test_server_fuzz.py::test_sql_injection_attempts['; WAITFOR DELAY '00:00:05'--]": 0.0001765289343893528,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[OPTIONS-/api/watermark]": 0.0001774849370121956,
        "test/test_server_fuzz.py::test_sql_injection_attempts[1; DROP TABLE accounts]": 0.0001697479747235775,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PATCH-/api/watermark]": 0.0002229649107903242,
        "test/test_server_fuzz.py::test_sql_injection_attempts[' OR '1'='1]": 0.0001621341798454523,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<iframe src='javascript:alert(1)'></iframe>]": 0.0001676478423178196,
        "test/test_watermarking_fuzz.py::test_fuzz_hash_after_eof_tampering": 0.0002423019614070654,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[DELETE-/healthz]": 0.00018908199854195118,
        "test/test_server_fuzz.py::test_long_string_dos_simulation": 0.00017387699335813522,
        "test/test_server_fuzz.py::test_sql_injection_attempts['; SELECT * FROM users; --]": 0.00014835596084594727,
        "test/test_server_fuzz.py::test_sql_injection_attempts[' OR 'a'='a]": 0.0001491401344537735,
        "test/test_server_fuzz.py::test_sql_injection_attempts['; DROP TABLE users; --]": 0.00014481507241725922,
        "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_validates_email": 0.00032562296837568283,
        "test/test_server_fuzz.py::test_create_user_fuzz": 0.0001840048935264349,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[';alert(1);//]": 0.00016160914674401283,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[POST-/api/watermark]": 0.00018631108105182648,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[GET-/api/watermark]": 0.00015983683988451958,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[POST-/api/create-user]": 0.00017056497745215893,
        "test/test_server_fuzz.py::test_create_app_fuzz": 0.00019083614461123943,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<svg/onload=alert(1)>]": 0.00016353605315089226,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PATCH-/healthz]": 0.00015973416157066822,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[<script>document.cookie</script>]": 0.0001488751731812954,
        "test/test_server_fuzz.py::test_healthz_fuzz": 0.00022186408750712872,
        "test/test_server_fuzz.py::test_sql_injection_attempts[admin' --]": 0.00018218299373984337,
        "test/test_server_fuzz.py::test_watermark_fuzz": 0.00025959406048059464,
        "test/test_watermarking_fuzz.py::test_fuzz_load_pdf_bytes_robustness": 0.0002548547927290201,
        "test/test_server_fuzz.py::test_sql_injection_attempts[' OR 1=1--]": 0.00022615119814872742,
        "test/test_watermarking_fuzz.py::test_stress_randomized_sequences": 0.00020760693587362766,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[PUT-/api/watermark]": 0.0006112901028245687,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[OPTIONS-/api/create-user]": 0.00019040401093661785,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[POST-/healthz]": 0.00020054099150002003,
        "test/test_server_fuzz.py::test_sql_injection_attempts[\" OR \"1\"=\"1]": 0.00017464184202253819,
        "test/test_watermarking_fuzz.py::test_fuzz_email_after_eof_with_valid_email": 0.000243073096498847,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[OPTIONS-/healthz]": 0.000195726053789258,
        "test/test_server_fuzz.py::test_fuzz_all_http_methods[GET-/healthz]": 0.0001986080314964056,
        "test/test_server_fuzz.py::test_xss_payloads_reflection[\"><script>fetch('/')</script>]": 0.0003151900600641966
    },
    "stats_time": 5.034234002
}